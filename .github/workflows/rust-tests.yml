name: Rust Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          echo "Checking available packages..."
          apt-cache search libwebkit2gtk-4.0-dev || echo "libwebkit2gtk-4.0-dev not found"
          apt-cache search libjavascriptcoregtk-4.0-dev || echo "libjavascriptcoregtk-4.0-dev not found"
          echo "Installing packages one by one..."
          sudo apt-get install -y libwebkit2gtk-4.0-dev || echo "Failed to install libwebkit2gtk-4.0-dev"
          sudo apt-get install -y libappindicator3-dev || echo "Failed to install libappindicator3-dev"
          sudo apt-get install -y librsvg2-dev || echo "Failed to install librsvg2-dev"
          sudo apt-get install -y libssl-dev || echo "Failed to install libssl-dev"
          sudo apt-get install -y libgtk-3-dev || echo "Failed to install libgtk-3-dev"
          sudo apt-get install -y libjavascriptcoregtk-4.0-dev || echo "Failed to install libjavascriptcoregtk-4.0-dev"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Node.js dependencies
        run: npm install

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Build project
        run: |
          cd src-tauri
          echo "Building Rust project..."
          echo "Rust version:"
          rustc --version
          echo "Cargo version:"
          cargo --version
          echo "Building with detailed output..."
          cargo build --verbose 2>&1 || {
            echo "Build failed, checking for specific errors..."
            cargo check --verbose 2>&1 || echo "cargo check also failed"
            exit 1
          }
          echo "Build completed successfully"
        env:
          CARGO_TERM_COLOR: always

      - name: Run tests
        run: |
          cd src-tauri
          echo "Running tests..."
          cargo test --verbose
          echo "Tests completed successfully"

      - name: Check formatting
        run: |
          cd src-tauri
          cargo fmt --all -- --check

      - name: Run clippy
        run: |
          cd src-tauri
          cargo clippy --all-targets --all-features -- -D warnings
