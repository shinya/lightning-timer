name: Rust Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            libssl-dev \
            libgtk-3-dev \
            libjavascriptcoregtk-4.0-dev \
            libayatana-appindicator3-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev \
            libatk1.0-dev \
            libatspi2.0-dev \
            libdbus-1-dev \
            libdbus-glib-1-dev

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install Node.js dependencies
        run: npm install

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: src-tauri/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-target-

      - name: Build project
        run: |
          cd src-tauri
          echo "Building Rust project..."
          echo "Rust version:"
          rustc --version
          echo "Cargo version:"
          cargo --version
          echo "Current directory contents:"
          ls -la
          echo "Cargo.toml contents:"
          cat Cargo.toml
          echo "Checking system libraries..."
          pkg-config --list-all | grep -E "(webkit|gtk|glib)" || echo "No webkit/gtk packages found"
          echo "Checking for required libraries..."
          pkg-config --exists webkit2gtk-4.0 && echo "webkit2gtk-4.0 found" || echo "webkit2gtk-4.0 NOT found"
          pkg-config --exists gtk+-3.0 && echo "gtk+-3.0 found" || echo "gtk+-3.0 NOT found"
          pkg-config --exists glib-2.0 && echo "glib-2.0 found" || echo "glib-2.0 NOT found"
          echo "Building with detailed output..."
          cargo build --verbose
          echo "Build completed successfully"
        env:
          CARGO_TERM_COLOR: always

      - name: Run tests
        run: |
          cd src-tauri
          echo "Running tests..."
          cargo test --verbose
          echo "Tests completed successfully"

      - name: Check formatting
        run: |
          cd src-tauri
          cargo fmt --all -- --check

      - name: Run clippy
        run: |
          cd src-tauri
          cargo clippy --all-targets --all-features -- -D warnings
